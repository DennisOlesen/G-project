%{
(* HEADER *)
%}

/* DECLARATIONS */
%start Prog

%token <int*int> PROGRAM FUNCTION PROCEDURE
%token <int*int> LPAREN RPAREN SLPAREN SRPAREN CLPAREN CRPAREN
%token <int*int> BEGIN END
%token <int*int> SEMICOLON COLON COMMA DOT
%token <(int*int)*string> ID
%token <int*int> VAR
%token <int*int> INT CHAR BOOL ARRAY OF
%token <(int*int)*int> NUMLIT
%token <(int*int)*bool> LOGICLIT
%token <(int*int)*char> CHARLIT
%token <(int*int)*string> STRINGLIT
%token <int*int> PLUS MINUS TIMES SLASH EQUALS LT AND OR NOT
%token <int*int> IF ELSE THEN
%token <int*int> WHILE DO
%token <int*int> RETURN
%token <int*int> ASSIGN
%token <int*int> EOF

/* add type declarations */

/* funtion declarations */
%type <AbSyn.Prog> Prog
%type <AbSyn.FunDec list> FunDecs
%type <AbSyn.FunDec> FunDec

/* declarations */
%type <AbSyn.Dec list> PDecl
%type <AbSyn.Dec list> Params
%type <AbSyn.Dec> Dec
%type <AbSyn.Dec list> Decs

/* function, procedure parameters and index list */
%type <AbSyn.Exp list> CallParams
%type <AbSyn.Exp list> Exps

/* types */
%type <AbSyn.Type> Type

/* blocks */
%type <AbSyn.StmtBlock> Block

/* statements */
%type <AbSyn.Stmt list> StmtSeq
%type <AbSyn.Stmt> Stmt

/* L-values and expressions */
%type <AbSyn.Pos*AbSyn.LVAL> LVal
%type <AbSyn.Exp> Exp
%type <AbSyn.Exp option> Ret

/* associativty and precedence */

%left OR
%left AND

%left PLUS
%left MINUS
%left TIMES
%left SLASH
%right NOT

%nonassoc EQUALS LT

%right IF THEN ELSE

%%

/* RULES */
Prog:
    PROGRAM ID SEMICOLON FunDecs EOF  { $4 }

FunDecs:
    FunDecs FunDec                  { $1 @ [$2] }
  | FunDec                          { [$1] }

FunDec:
    FUNCTION ID LPAREN PDecl RPAREN COLON Type Block SEMICOLON  { AbSyn.Func($7, #2 $2, $4, $8, $1) }
  | PROCEDURE ID LPAREN PDecl RPAREN Block SEMICOLON            { AbSyn.Proc(#2 $2, $4, $6, $1) }

PDecl:
    Params                          { $1 }
  |                                 { [] }

Params:
    Params SEMICOLON Dec            { $1 @ [$3] }
  | Dec                             { [$1] }

Dec:
    ID COLON Type                   { AbSyn.Dec(#2 $1, $3, #1 $1) }

Decs:
    Decs SEMICOLON Dec              { $1 @ [$3] }
  | Dec                             { [$1] }

Type:
    INT                             { AbSyn.Int($1) }
  | CHAR                            { AbSyn.Char($1) }
  | BOOL                            { AbSyn.Bool($1) }
  | ARRAY OF Type                   { AbSyn.Array($3, $1) }

Block:
     VAR Decs SEMICOLON BEGIN StmtSeq SEMICOLON END { AbSyn.Block($2, $5) }
   | VAR Decs SEMICOLON Stmt        { AbSyn.Block($2, [$4]) }
   | BEGIN StmtSeq SEMICOLON END    { AbSyn.Block([], $2) }
   | Stmt                           { AbSyn.Block([], [$1] ) }

StmtSeq:
    StmtSeq SEMICOLON Stmt          { $1 @ [$3]}
  | Stmt                            { [$1] }

Stmt:
    ID LPAREN CallParams RPAREN     { AbSyn.ProcCall(#2 $1, $3, #1 $1) }
  | IF Exp THEN Block               { AbSyn.IfThEl($2, $4, AbSyn.Block([], []), $1) }
  | IF Exp THEN Block ELSE Block    { AbSyn.IfThEl($2, $4, $6, $1) }
  | WHILE Exp DO Block              { AbSyn.While($2, $4, $1) }
  | RETURN Ret                      { AbSyn.Return($2, $1) }
  | LVal ASSIGN Exp                 { AbSyn.Assign(#2 $1, $3, #1 $1) }

LVal:
    ID                              { (#1 $1, AbSyn.Var(#2 $1)) }
  | ID SLPAREN Exps SRPAREN         { (#1 $1, AbSyn.Index(#2 $1, $3)) }

Ret:
    Exp                             { SOME $1 }
  |                                 { NONE }

Exp:
    NUMLIT                          { AbSyn.Literal(AbSyn.BVal(AbSyn.Num(#2 $1)), #1 $1) }
  | LOGICLIT                        { AbSyn.Literal(AbSyn.BVal(AbSyn.Log(#2 $1)), #1 $1) }
  | CHARLIT                         { AbSyn.Literal(AbSyn.BVal(AbSyn.Chr(#2 $1)), #1 $1) }
  | STRINGLIT                       { AbSyn.StrLit(#2 $1, #1 $1) }
  | CLPAREN Exps CRPAREN            { AbSyn.ArrLit($2, $1) }
  | LVal                            { AbSyn.LValue(#2 $1, #1 $1) }
  | NOT Exp                         { AbSyn.Not($2, $1) }
  | Exp PLUS Exp                    { AbSyn.Plus($1, $3, $2) }
  | Exp MINUS Exp                   { AbSyn.Minus($1, $3, $2) }
  | Exp TIMES Exp                   { AbSyn.Times($1, $3, $2) }
  | Exp SLASH Exp                   { AbSyn.Div($1, $3, $2) }
  | Exp EQUALS Exp                  { AbSyn.Equal($1, $3, $2) }
  | Exp LT Exp                      { AbSyn.Less($1, $3, $2) }
  | Exp AND Exp                     { AbSyn.And($1, $3, $2) }
  | Exp OR Exp                      { AbSyn.Or($1, $3, $2) }
  | LPAREN Exp RPAREN               { $2 }
  | ID LPAREN CallParams RPAREN     { AbSyn.FunApp(#2 $1, $3, #1 $1) }

CallParams:
    Exps                            { $1 }
  |                                 { [] }

Exps:
    Exp COMMA Exps                  { $1 :: $3 }
  | Exp                             { [$1] }


%%
